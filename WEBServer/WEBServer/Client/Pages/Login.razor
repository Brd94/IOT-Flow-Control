@page "/login"
@inject NavigationManager navigationManager
@inject CustomStateProvider authStateProvider

<div class="content col-md-6 mx-auto">

    <h1 class="h2 font-weight-normal login-title text-center mb-4 mt-1">
        Login
    </h1>
    <EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="loginRequest">
        <DataAnnotationsValidator />
        @* <label for="inputUsername" class="sr-only">User Name</label> *@
        <InputText id="inputUsername" class="form-control m-3" @bind-Value="loginRequest.UserName" autofocus
            placeholder="Indirizzo mail" />
        <ValidationMessage For="@(() => loginRequest.UserName)" />
        @* <label for="inputPassword" class="sr-only">Password</label> *@
        <InputText type="password" id="inputPassword" class="form-control m-3" placeholder="Password"
            @bind-Value="loginRequest.Password" />
        <ValidationMessage For="@(() => loginRequest.Password)" />
        <div class="form-check m-3">
            <InputCheckbox id="inputRememberMe" class="form-check-input" @bind-Value="@loginRequest.RememberMe" />
            <label class="form-check-label" for="inputRememberMe">Ricordami</label>
        </div>
        <button class="btn btn-lg btn-primary btn-block col-md-4 mx-auto" type="submit">Entra</button>
        <label class="text-danger">@error</label>
             <NavLink href="register">
                <h6 class="font-weight-normal text-center">Crea un account</h6>
            </NavLink>
   
    </EditForm>
</div>
@code{
    LoginRequest loginRequest { get; set; } = new LoginRequest();
    string error { get; set; }
    async Task OnSubmit()
    {
        error = null;
        try
        {
            await authStateProvider.Login(loginRequest);
            navigationManager.NavigateTo("");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
}