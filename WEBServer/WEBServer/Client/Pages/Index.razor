@page "/"
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps
@using Microsoft.JSInterop;
@using System.Threading.Tasks;
@using Microsoft.AspNetCore.SignalR.Client
@inject IJSRuntime JS;
@inject ICompanyService companyService
@inject NavigationManager Navigation




<div>
    <GoogleMap @ref="@map1" Id="map1" Options="@mapOptions" OnAfterInit="@(async () => await OnAfterInitAsync())">
    </GoogleMap>
</div>



@code{
    private GoogleMap map1;
    private MapOptions mapOptions;

    private List<Marker> markers = new List<Marker>();

    private HubConnection _hubConnection;


    protected override async Task OnInitializedAsync()
    {

        base.OnInitialized();

        mapOptions = new MapOptions()
        {
            Zoom = 10,
            Center = new LatLngLiteral()
            {
                Lat = 43.062410,
                Lng = 12.201383
            },
            MapTypeId = MapTypeId.Roadmap,
            DisableDefaultUI = true

        };


        string huburi = $"{this.Navigation.BaseUri}hubs/notifyhub";

        //Console.WriteLine("URL:" + huburi);


        _hubConnection = new HubConnectionBuilder()
       .WithUrl(huburi)
       .Build();

        _hubConnection.On<object>("UpdateReceived", message =>
        {
            Console.WriteLine("Refresh.." + message);

            RefreshCompanies();

            this.StateHasChanged();
        });

        await _hubConnection.StartAsync();

        Console.WriteLine("STATO SIGNALR:" + _hubConnection.State);

    }

    protected override void OnAfterRender(bool firstRender)
    {

    }

    private async Task OnAfterInitAsync()
    {
        await map1.InteropObject.AddListener("bounds_changed", async () => await BoundsChanged());

        await RefreshCompanies();
    }

    private async Task RefreshCompanies()
    {

        var companies = await companyService.GetCompaniesAsync(new CompanyFilter());

        foreach (var marker in markers)
            await marker.SetMap(null);

        markers.Clear();




        foreach (var company in companies)
        {
            var latlng = new LatLngLiteral(company.Longitude, company.Latitude);

            var marker = await Marker.CreateAsync(map1.JsRuntime, new MarkerOptions()
            {
                Animation = Animation.Drop,
                Icon = new Symbol()
                {
                    Path = "M 0 16 L -20 8 L 20 8 L 0 16",
                    FillColor = "red",
                    FillOpacity = 0.6f,
                    StrokeWeight = 0,
                    Rotation = 0,
                    Scale = 2,
                },
                Label = new MarkerLabel()
                {
                    Color = "red",
                    FontSize = "15px",
                    FontWeight = "bold",
                    Text = company.BusinessName + " - Persone : " + company.PeopleCount
                },
                Clickable = true,
                Position = latlng,
                Map = map1.InteropObject,
            });

            await marker.AddListener("click", async () => await MarkerClick());
            markers.Add(marker);
        }
    }


    protected async Task MarkerClick()
    {

    }


    protected async Task BoundsChanged()
    {
        var bounds = await map1.InteropObject.GetBounds();
        //Console.WriteLine("Bounds changed : {0} - {1} - {2} - {3}", bounds.North, bounds.East, bounds.South, bounds.West);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await getHeight();
        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task getHeight()
    {
        await JS.InvokeAsync<int>("returnHeigth");
    }

}
